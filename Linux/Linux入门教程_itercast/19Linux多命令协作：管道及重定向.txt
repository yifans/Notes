19Linux多命令协作：管道及重定向
	19.1 不要重复发明轮子
		开源文化的核心理念之一就是不要重复发明轮子，很多的开源软件都是现有软件 、代码、功能的重新组合，就像是通过零件装配机器一样，源代码的开放和共享让这成为了可能，同时也大大的提高了效率和生产力
	19.2 管道和重定向
		在Linux系统中，大多数命令都非常简单，很少出现复杂功能的命令，每个命令往往只实现一个或者几个很简单的功能，我们可以通过将不同功能的命令组合在一起使用，以达到完成某个复杂功能的目的。

		Linux中，几乎所有命令的返回数据都是纯文本的（因为命令都是运行在CLI下），而绝大多数命令的输入格式也是纯文本，这就让多命令协作成为可能。

		Linux命令行为我们提供了管道和重定向机制，多命令协作就是通过管道和重定向完成的。

		命令行SHELL的数据流有以下定义：
			------------------------------------
			名称		说明		编号	默认
			------------------------------------
			STDIN 		标准输入	0		键盘
			STDOUT 		标准输出	1 		终端
			STDERR 		标准错误	2 		终端
			------------------------------------

		命令通过STDIN接收参数或者数据，
		通过STDOUT输出结果或通过STDERR输出错误

		管道通常用来组合不同的命令，以实现一个复杂的功能。
		重定向通常用来保存某命令的输出信息和错误信息，可以用来记录执行结果或保存错误信息到一个指定的文件
	19.3重定向
		用来控制终端数据流：
		>   	将标准输入以覆盖形式重定向到指定文件，如：ls > outfile
		>>   	将标准输入以追加形式重定向到指定文件，如：ls >> outfile
		<     	重定向标准输入   			如：grep linuxcast < /etc/passwd
		2>   	重定向标准错误
		2>&1  	将标准错误合并到标准输出中
	19.4 管道
		管道“|”用以将一个命令的标准输出作为另一个命令的标准输入：
		命令1  |  命令2

